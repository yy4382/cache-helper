(()=>{async function f(t){return await new Promise((r,i)=>{$httpClient.get(t,async(n,e,s)=>{n&&i(n),r(s)})})}async function p(t,r,i){let n=await f(r);$persistentStore.write(n,t);let e=$persistentStore.read(i),s=JSON.parse(e),o=s.find(c=>c.key===t);return o.update=new Date().toISOString(),$persistentStore.write(JSON.stringify(s),i),n}async function w(t,r,i=3600,n="json.cacheHelper.expireInfo"){let e=$persistentStore.read(n);if(!e){console.log("Cache info store not found, creating new one.");let a=await f(r);return $persistentStore.write(a,t),e=[],e.push({key:t,update:new Date().toISOString()}),$persistentStore.write(JSON.stringify(e),n),a}e=JSON.parse(e);let s=e.find(a=>a.key===t);if(!s){console.log("Cache info for this url not found, refetching.");let a=await f(r);return $persistentStore.write(a,t),e.push({key:t,update:new Date().toISOString()}),$persistentStore.write(JSON.stringify(e),n),a}if(i===-1)return console.log("maxAge = -1, always use cache."),$persistentStore.read(t);if(i===0)return console.log("maxAge = 0, always refetch."),await p(t,r,n);let o=new Date,c=new Date(s.update);return(o-c)/1e3>i?await p(t,r,n):$persistentStore.read(t)}})();
